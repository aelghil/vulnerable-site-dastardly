# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - webapp-vulnerablesite

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_044184FC3B9F46299C54E1A67B12C047 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_AE890CC96EAC4F78803BC791B04C861A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_A7DD7A061A24483FB48CBC2C9E981644 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'webapp-vulnerablesite'
          slot-name: 'Production'
          package: .

  scan-with-dastardly:
    name: Scan with Dastardly
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Run Dastardly Scan
      uses: PortSwigger/dastardly-github-action@main
      with:
        target-url: 'https://webapp-vulnerablesite-cbbke3hug0cgbuak.canadacentral-01.azurewebsites.net/'

    - name: Publish Dastardly Scan Report
      if: always()
      uses: mikepenz/action-junit-report@v4
      with:
        check_name: 'Dastardly Scan Report'
        report_paths: '**/dastardly-report.xml'
        require_tests: true

  scan-with-zap:
    runs-on: ubuntu-latest
    name: Scan with ZAP
    needs: deploy

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: main

    #- name: Log in to Docker (if needed)
    #  run: |
    #    echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.6.1
      with:
        docker_name: 'zaproxy/zap-stable'
        token: ${{ secrets.ZAP_TOKEN }}
        target: 'https://webapp-vulnerablesite-cbbke3hug0cgbuak.canadacentral-01.azurewebsites.net/'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Post Results
      run: |
        if [ -f ./zap.out ]; then
          echo "ZAP Scan completed. Results:"
          cat ./zap.out
        else
          echo "No ZAP output found!"
        fi
  
  burp-scan:
    runs-on: ubuntu-latest
    name: Scan with ZAP
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Download Burp Suite Community
        run: |
          wget https://portswigger.net/burp/releases/download?product=community&version=2023.6.2 -O burpsuite_community_v2023_6_2.sh
          chmod +x burpsuite_community_v2023_6_2.sh

      - name: Run Burp Suite Scan
        run: |
          # Start Burp Suite in headless mode
          nohup ./burpsuite_community_v2023_6_2.sh --headless --project-file=burp_project.burp --scan-target=https://webapp-vulnerablesite-cbbke3hug0cgbuak.canadacentral-01.azurewebsites.net/ --output-file=burp_scan_report.xml &
          # Wait for Burp to finish the scan (you may adjust the sleep time as needed)
          sleep 300

      # Step 5: Upload scan results as artifact
      - name: Upload Burp Suite scan results
        uses: actions/upload-artifact@v3
        with:
          name: burp-scan-results
          path: burp_scan_report.xml
